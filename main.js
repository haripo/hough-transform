// Generated by CoffeeScript 1.9.3
(function() {
  var DraggablePoint, Hough, Line, calcPositionDiff, eventToPosition,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  eventToPosition = function(e) {
    var rect;
    rect = event.target.getBoundingClientRect();
    return {
      x: event.clientX - rect.left,
      y: event.clientY - rect.top
    };
  };

  calcPositionDiff = function(p) {
    return {
      x: p[0].x - p[1].x,
      y: p[0].y - p[1].y
    };
  };

  window.onload = function() {
    var hough;
    hough = new Hough();
    return hough.draw();
  };

  Hough = (function() {
    function Hough(canvas1) {
      var fn, i, j, line, mouseleave, mousemove, point, position;
      this.canvas = canvas1;
      this.xy_canvas = document.getElementById("xy-canvas");
      this.xy_ctx = this.xy_canvas.getContext("2d");
      this.pq_canvas = document.getElementById("uv-canvas");
      this.pq_ctx = this.pq_canvas.getContext("2d");
      this.trans_func = function(x, y, p) {
        return -p * x + y + 1;
      };
      this.rev_trans_func = (function(_this) {
        return function(_x, _y, x) {
          return _x * x + _y + 1;
        };
      })(this);
      this.xy_line = new Line(this.rev_trans_func, this.xy_canvas);
      this.points = [];
      this.pq_lines = [];
      fn = (function(_this) {
        return function(line) {
          return point.moveBus().onValue(function(p) {
            line.move(p.x, p.y);
            return _this.draw();
          });
        };
      })(this);
      for (i = j = 1; j < 11; i = ++j) {
        position = {
          x: 10 * i,
          y: 10 * i
        };
        point = new DraggablePoint(this.xy_canvas, position, 5);
        line = new Line(this.trans_func, this.pq_canvas);
        fn(line);
        line.move(position.x, position.y);
        this.pq_lines.push(line);
        this.points.push(point);
      }
      mouseleave = Bacon.fromEvent(this.pq_canvas, "mouseleave");
      mousemove = Bacon.fromEvent(this.pq_canvas, "mousemove");
      mousemove.map(eventToPosition).merge(mouseleave.map(null)).onValue((function(_this) {
        return function(p) {
          if (p === null) {
            _this.xy_line.hide();
          } else {
            _this.xy_line.move(p.x, p.y);
          }
          return _this.draw();
        };
      })(this));
    }

    Hough.prototype.draw = function() {
      var j, k, len, len1, point, pq_line, ref, ref1;
      this.xy_ctx.fillStyle = "rgb(255, 255, 255)";
      this.xy_ctx.fillRect(0, 0, this.xy_canvas.width, this.xy_canvas.height);
      this.pq_ctx.fillStyle = "rgb(255, 255, 255)";
      this.pq_ctx.fillRect(0, 0, this.pq_canvas.width, this.pq_canvas.height);
      ref = this.points;
      for (j = 0, len = ref.length; j < len; j++) {
        point = ref[j];
        point.draw(this.xy_ctx);
      }
      ref1 = this.pq_lines;
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        pq_line = ref1[k];
        pq_line.draw(this.pq_ctx);
      }
      return this.xy_line.draw(this.xy_ctx);
    };

    return Hough;

  })();

  Line = (function() {
    function Line(transform, canvas) {
      this.transform = transform;
      this.draw = bind(this.draw, this);
      this.move = bind(this.move, this);
      this.width = canvas.width;
      this.height = canvas.height;
      this.half_width = this.width / 2;
      this.half_height = this.height / 2;
      this.x = null;
      this.y = null;
    }

    Line.prototype.move = function(x, y) {
      this.x = x / this.half_width - 1;
      return this.y = y / this.half_height - 1;
    };

    Line.prototype.hide = function() {
      this.x = null;
      return this.y = null;
    };

    Line.prototype.draw = function(ctx) {
      if (this.x === null || this.y === null) {
        return;
      }
      ctx.beginPath();
      ctx.moveTo(0, this.transform(this.x, this.y, -1) * this.half_height);
      ctx.lineTo(this.width, this.transform(this.x, this.y, 1) * this.half_height);
      return ctx.stroke();
    };

    return Line;

  })();

  DraggablePoint = (function() {
    DraggablePoint.prototype._dragMoveStream = function(mousedown, mouseup, mousemove) {
      return mousedown.map(eventToPosition).filter(this.hittest).flatMap((function(_this) {
        return function() {
          return mousemove.map(eventToPosition).slidingWindow(2, 2).map(calcPositionDiff).takeUntil(mouseup);
        };
      })(this));
    };

    function DraggablePoint(canvas, position1, radius) {
      var mousedown, mousemove, mouseup;
      this.position = position1;
      this.radius = radius;
      this.draw = bind(this.draw, this);
      this.moveBus = bind(this.moveBus, this);
      this.hittest = bind(this.hittest, this);
      mousedown = Bacon.fromEvent(canvas, "mousedown");
      mouseup = Bacon.fromEvent(canvas, "mouseup");
      mousemove = Bacon.fromEvent(canvas, "mousemove");
      this.move_bus = new Bacon.Bus();
      this._dragMoveStream(mousedown, mouseup, mousemove).toProperty({
        x: 0,
        y: 0
      }).onValue((function(_this) {
        return function(p) {
          _this.position.x -= p.x;
          _this.position.y -= p.y;
          return _this.move_bus.push(_this.position);
        };
      })(this));
    }

    DraggablePoint.prototype.hittest = function(p) {
      var dx, dy;
      dx = p.x - this.position.x;
      dy = p.y - this.position.y;
      return (Math.pow(dx, 2) + Math.pow(dy, 2)) < Math.pow(this.radius, 2);
    };

    DraggablePoint.prototype.moveBus = function() {
      return this.move_bus;
    };

    DraggablePoint.prototype.draw = function(ctx) {
      ctx.beginPath();
      ctx.arc(this.position.x, this.position.y, this.radius, 0, Math.PI * 2, false);
      return ctx.stroke();
    };

    return DraggablePoint;

  })();

}).call(this);
