// Generated by CoffeeScript 1.9.3
(function() {
  var DraggablePoint, Hough, eventToPosition;

  eventToPosition = function(e) {
    var rect;
    rect = event.target.getBoundingClientRect();
    return {
      x: event.clientX - rect.left,
      y: event.clientY - rect.top
    };
  };

  window.onload = function() {
    var hough;
    hough = new Hough();
    return hough.draw();
  };

  Hough = (function() {
    function Hough(canvas1) {
      var i, j, point, position;
      this.canvas = canvas1;
      this.xy_canvas = document.getElementById("xy-canvas");
      this.xy_ctx = this.xy_canvas.getContext("2d");
      this.pq_canvas = document.getElementById("uv-canvas");
      this.pq_ctx = this.pq_canvas.getContext("2d");
      this.width = this.xy_canvas.width;
      this.height = this.xy_canvas.height;
      this.points = [];
      for (i = j = 1; j < 10; i = ++j) {
        position = {
          x: 10 * i,
          y: 10 * i
        };
        point = new DraggablePoint(this.xy_canvas, position, 5);
        point.moveBus().onValue((function(_this) {
          return function() {
            return _this.draw();
          };
        })(this));
        this.points.push(point);
      }
      Bacon.fromEvent(this.pq_canvas, "mousemove").map((function(_this) {
        return function(e) {
          return eventToPosition(e);
        };
      })(this)).toProperty({
        x: 0,
        y: 0
      }).onValue((function(_this) {
        return function(p) {
          _this.mx = p.x;
          _this.my = p.y;
          return _this.draw();
        };
      })(this));
      Bacon.fromEvent(this.pq_canvas, "mouseleave").onValue((function(_this) {
        return function(p) {
          _this.mx = null;
          _this.my = null;
          return _this.draw();
        };
      })(this));
    }

    Hough.prototype.draw = function() {
      var hh, hw, j, len, point, px, py, q, ref, y;
      this.xy_ctx.fillStyle = "rgb(255, 255, 255)";
      this.xy_ctx.fillRect(0, 0, this.width, this.height);
      this.pq_ctx.fillStyle = "rgb(255, 255, 255)";
      this.pq_ctx.fillRect(0, 0, this.width, this.height);
      hw = this.width / 2;
      hh = this.height / 2;
      ref = this.points;
      for (j = 0, len = ref.length; j < len; j++) {
        point = ref[j];
        point.draw(this.xy_ctx);
        px = point.position.x / hw - 1;
        py = point.position.y / hh - 1;
        q = function(p) {
          return -p * px + py + 1;
        };
        this.pq_ctx.beginPath();
        this.pq_ctx.moveTo(0, q(-1) * hh);
        this.pq_ctx.lineTo(this.width, q(1) * hh);
        this.pq_ctx.stroke();
      }
      if (this.mx === null || this.my === null) {
        return;
      }
      y = (function(_this) {
        return function(x) {
          return (_this.mx / hw - 1) * x + (_this.my / hh - 1) + 1;
        };
      })(this);
      this.xy_ctx.beginPath();
      this.xy_ctx.moveTo(0, y(-1) * hh);
      this.xy_ctx.lineTo(this.width, y(1) * hh);
      return this.xy_ctx.stroke();
    };

    return Hough;

  })();

  DraggablePoint = (function() {
    function DraggablePoint(canvas, position1, radius) {
      var deltas, mousedown, mouseup;
      this.position = position1;
      this.radius = radius;
      mousedown = Bacon.fromEvent(canvas, "mousedown");
      mouseup = Bacon.fromEvent(canvas, "mouseup");
      deltas = mousedown.map((function(_this) {
        return function(e) {
          return eventToPosition(e);
        };
      })(this)).filter((function(_this) {
        return function(p) {
          return _this.hittest(p);
        };
      })(this)).flatMap((function(_this) {
        return function() {
          return Bacon.fromEvent(canvas, "mousemove").map(function(e) {
            return eventToPosition(e);
          }).slidingWindow(2, 2).map(function(p) {
            return {
              x: p[0].x - p[1].x,
              y: p[0].y - p[1].y
            };
          }).takeUntil(mouseup);
        };
      })(this));
      this.move_bus = new Bacon.Bus();
      deltas.toProperty({
        x: 0,
        y: 0
      }).onValue((function(_this) {
        return function(p) {
          _this.position.x -= p.x;
          _this.position.y -= p.y;
          return _this.move_bus.push(_this.position);
        };
      })(this));
    }

    DraggablePoint.prototype.hittest = function(p) {
      var dx, dy;
      dx = p.x - this.position.x;
      dy = p.y - this.position.y;
      return (Math.pow(dx, 2) + Math.pow(dy, 2)) < Math.pow(this.radius, 2);
    };

    DraggablePoint.prototype.moveBus = function() {
      return this.move_bus;
    };

    DraggablePoint.prototype.draw = function(ctx) {
      ctx.beginPath();
      ctx.arc(this.position.x, this.position.y, this.radius, 0, Math.PI * 2, false);
      return ctx.stroke();
    };

    return DraggablePoint;

  })();

}).call(this);
